[{"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\index.js":"1","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\reportWebVitals.js":"2","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\App.js":"3","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\i18n.js":"4","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\index.jsx":"5","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\BabylonManager.js":"6","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\AppUtils.js":"7","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\EditorController.jsx":"8","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\GameManager.js":"9","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\CategoryButton.jsx":"10","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\ListModal.jsx":"11","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\ItemButton.jsx":"12","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\StudioScene\\StudioSceneManager.js":"13","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\StudioScene\\LoaderManager.js":"14"},{"size":463,"mtime":1618576289156,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607258623794,"results":"17","hashOfConfig":"16"},{"size":289,"mtime":1615846319709,"results":"18","hashOfConfig":"16"},{"size":470,"mtime":1611419273942,"results":"19","hashOfConfig":"16"},{"size":1838,"mtime":1618659447152,"results":"20","hashOfConfig":"16"},{"size":478,"mtime":1618659835621,"results":"21","hashOfConfig":"16"},{"size":1755,"mtime":1620316266414,"results":"22","hashOfConfig":"16"},{"size":13522,"mtime":1635512709626,"results":"23","hashOfConfig":"16"},{"size":827,"mtime":1615849409633,"results":"24","hashOfConfig":"16"},{"size":1102,"mtime":1635613736214,"results":"25","hashOfConfig":"16"},{"size":3544,"mtime":1618659867029,"results":"26","hashOfConfig":"16"},{"size":1303,"mtime":1635613816283,"results":"27","hashOfConfig":"16"},{"size":10365,"mtime":1619223293714,"results":"28","hashOfConfig":"16"},{"size":2666,"mtime":1635539068240,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"3zcpre",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\index.js",["64"],"import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["65","66"],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\reportWebVitals.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\App.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\i18n.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\index.jsx",["67","68"],"import React, {\r\n  createRef,\r\n  createContext,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useMemo,\r\n} from \"react\";\r\nimport Row from \"antd/lib/row\";\r\nimport Col from \"antd/lib/col\";\r\nimport \"../index.css\";\r\n\r\n//Components\r\nimport EditorController from \"./EditorController\";\r\nimport { AppTabsEnum, appData } from \"../AppUtils\";\r\nimport BabylonManager from \"../BabylonManager\";\r\n//\r\nconst gmRef = createRef(null);\r\nexport const GmContext = createContext(null);\r\n//\r\n\r\nconst Editor = () => {\r\n  const [gameManager, setGameManager] = useState(null);\r\n  const [selectedTab, setSeletedTab] = useState(AppTabsEnum.editorTab);\r\n\r\n\r\n  useEffect(() => {\r\n    const GManger = BabylonManager(gmRef.current).GManger; //Create Babylonjs Ref\r\n    setGameManager(GManger);\r\n  }, [setGameManager]);\r\n\r\n  const setHandler = useCallback((newHandler)=>{\r\n    setGameManager((GManger)=>{\r\n    GManger.studioSceneManager.handlers = newHandler; //Hnadlers\r\n    return GManger;\r\n  });\r\n  },[])\r\n\r\n  const renderTabs = useCallback(() => {\r\n    switch (selectedTab) {\r\n      default:\r\n      case AppTabsEnum.editorTab:\r\n        return (\r\n          <Row style={{ height: \"100%\" }} type=\"flex\">\r\n            <Col\r\n              span={24}\r\n              style={{\r\n                height: \"100%\",\r\n                background: \"radial-gradient(at top, #fff 0%, #fff 100%) top\",\r\n              }}\r\n            >\r\n              <EditorController\r\n                appData={appData}\r\n              />\r\n              <canvas {...{}} className=\"canvas\" ref={gmRef} />\r\n            </Col>\r\n          </Row>\r\n        );\r\n    }\r\n  }, [selectedTab]);\r\n\r\n  return (\r\n    <GmContext.Provider value={{gm:gameManager, setHandler: setHandler}}>{renderTabs()}</GmContext.Provider>\r\n  );\r\n};\r\nexport default Editor;\r\n\r\n// On Windows Shift + Alt + F.\r\n// On Mac Shift + Option + F.\r\n","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\BabylonManager.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\AppUtils.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\EditorController.jsx",["69","70","71","72","73","74","75","76","77"],"import React, { useContext, useCallback, useState, useMemo } from \"react\";\r\nimport { Modal, Button, Spin, Radio } from \"antd\";\r\n\r\nimport Row from \"antd/lib/row\";\r\nimport Col from \"antd/lib/col\";\r\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\r\nimport \"../index.css\";\r\nimport {\r\n  LeftOutlined,\r\n  RightOutlined,\r\n  HomeFilled,\r\n  createFromIconfontCN,\r\n  ExclamationCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { GmContext } from \"../Editor\";\r\nimport CategoryButton from \"./CategoryButton\";\r\nimport ItemButton from \"./ItemButton\";\r\nimport { Colors, Categories } from \"../Config.json\";\r\nimport { useEffect } from \"react\";\r\nimport ListModal from \"./ListModal\";\r\nimport { AppTabsEnum } from \"../AppUtils\";\r\n\r\nconst IconFont = createFromIconfontCN({\r\n  scriptUrl: [\r\n    \"//at.alicdn.com/t/font_1788044_0dwu4guekcwr.js\", // icon-javascript, icon-java, icon-shoppingcart (overrided)\r\n    \"//at.alicdn.com/t/font_1788592_a5xf2bdic3u.js\", // icon-shoppingcart, icon-python\r\n  ],\r\n});\r\nconst { confirm } = Modal;\r\n\r\nconst EditorController = (props) => {\r\n  const { appData } = props;\r\n\r\n  const [selectedCat, setSelectedCat] = useState(Object.keys(Categories)[0]);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [selectedColor, setSelectedColor] = useState(\"\");\r\n\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [charcterData, setCharcterData] = useState(null);\r\n\r\n  //Modal\r\n  const [selectedModalData, setSelectedModalData] = useState(null);\r\n  const [selectedListTab, setSelectedListTab] = useState(false);\r\n  const [isOwnedTab, setIsOwnedTab] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const { gm: gameManager, setHandler } = useContext(GmContext);\r\n\r\n  //3D\r\n  const studioSceneHandlers = useMemo(() => {\r\n    return {\r\n      onLoad: () => {\r\n        setIsLoading(false);\r\n      },\r\n      hello: () => {\r\n        setIsLoading(false);\r\n      },\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!gameManager) return;\r\n    setHandler(studioSceneHandlers);\r\n    //load\r\n\r\n    const onFinish = (result) => {\r\n      setIsLoading(false);\r\n      setSelectedItem(\r\n        gameManager.studioSceneManager.charcterProps[Object.keys(Categories)[0]]\r\n          ? gameManager.studioSceneManager.charcterProps[\r\n            Object.keys(Categories)[0]\r\n          ].myId\r\n          : null\r\n      );\r\n      setCharcterData(result.data);\r\n      setTotalPrice(result.totalPrice);\r\n    };\r\n    gameManager.studioSceneManager.loadAllCharcterData(\r\n      appData.item_equipped,\r\n      onFinish\r\n    );\r\n  }, [gameManager]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"charcterData ====>> \", charcterData);\r\n  }, [charcterData]);\r\n\r\n  const loadItemPerId = useCallback(\r\n    (itemId) => {\r\n      if (!gameManager) return;\r\n      setIsLoading(true);\r\n      let onLoad = (result) => {\r\n        const { data, totalPrice } = result;\r\n        setCharcterData(data);\r\n        setTotalPrice(totalPrice);\r\n        setIsLoading(false);\r\n      };\r\n      gameManager.studioSceneManager.handleLoadItemPerId(\r\n        selectedCat,\r\n        itemId ? itemId : null,\r\n        onLoad\r\n      );\r\n    },\r\n    [selectedCat, gameManager]\r\n  );\r\n\r\n  const itemsPerCategory = useMemo(() => {\r\n    if (selectedCat) {\r\n      // isOwnedTab\r\n      let selectedCatObj = appData.item_owned.find(\r\n        (catObj) => catObj.category === selectedCat\r\n      );\r\n      return Object.values(Categories[selectedCat])\r\n        .filter(\r\n          (itemData) =>\r\n            (isOwnedTab && selectedCatObj.items.includes(itemData.id)) ||\r\n            (!isOwnedTab && !selectedCatObj.items.includes(itemData.id))\r\n        )\r\n        .map((itemData, index) => {\r\n          return (\r\n            <ItemButton\r\n              key={itemData.id}\r\n              itemData={itemData}\r\n              selected={selectedItem === itemData.id ? true : false}\r\n            />\r\n          );\r\n        });\r\n    } else return [];\r\n  }, [selectedCat, selectedItem, isOwnedTab]);\r\n\r\n  const renderColors = useCallback(() => {\r\n    return (\r\n      <Row\r\n        style={{\r\n          width: \"100%\",\r\n          // height: \"50px\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          // marginTop: \"-90px\",\r\n        }}\r\n      >\r\n        {Object.values(Colors).map((color, index) => {\r\n          return (\r\n            <Button\r\n              key={index}\r\n              disabled={!Boolean(selectedItem)}\r\n              style={{\r\n                visibility: \"visible\",\r\n                margin: \"8px\",\r\n                backgroundColor: color.hex,\r\n                border:\r\n                  selectedColor === color.id\r\n                    ? \"2.5px solid rgb(0 116 255)\"\r\n                    : \"1px solid #898e94\",\r\n              }}\r\n              onClick={() => {\r\n                let isSelected = selectedColor === color.id;\r\n                gameManager.studioSceneManager.handleChangeCatColor(\r\n                  selectedCat,\r\n                  isSelected ? null : color.hex\r\n                );\r\n                setSelectedColor(isSelected ? null : color.id);\r\n              }}\r\n              type=\"default\"\r\n              shape=\"circle\"\r\n              size=\"large\"\r\n            ></Button>\r\n          );\r\n        })}\r\n      </Row>\r\n    );\r\n  }, [selectedCat, selectedColor, selectedItem, gameManager]);\r\n\r\n  function showConfirm() {\r\n    confirm({\r\n      title: \"購入しますか？\",\r\n      icon: <ExclamationCircleOutlined />,\r\n      // content: 'Some descriptions',\r\n      okText: \"はい\",\r\n      closable: true,\r\n      cancelText: \"キャンセル\",\r\n      onOk() {\r\n        console.log(\"OK\");\r\n      },\r\n      onCancel() {\r\n        console.log(\"Cancel\");\r\n      },\r\n    });\r\n  }\r\n\r\n  const handleOnModalOpen = useCallback(\r\n    (selectedTab) => {\r\n      setSelectedModalData(() => {\r\n        if (selectedTab === AppTabsEnum.ownedTab) return appData.item_owned;\r\n        else return charcterData;\r\n      });\r\n      setSelectedListTab(selectedTab);\r\n      setIsOwnedTab(true);\r\n    },\r\n    [charcterData]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Row\r\n        style={{\r\n          position: \"fixed\",\r\n          width: \"100%\",\r\n          bottom: 0,\r\n          height: \"100%\",\r\n          pointerEvents: \"none\",\r\n        }}\r\n        type=\"flex\"\r\n      >\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<HomeFilled />}\r\n          shape=\"circle\"\r\n          size=\"large\"\r\n          style={{\r\n            position: \"absolute\",\r\n            width: \"75px\",\r\n            height: \"75px\",\r\n            margin: \"15px\",\r\n            pointerEvents: \"all\",\r\n          }}\r\n          onClick={() => { }}\r\n        ></Button>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            pointerEvents: \"all\",\r\n            left: \"8%\",\r\n            top: \"6%\",\r\n            marginLeft: \"30%\"\r\n            // marginTop: \"15vh\",\r\n          }}\r\n        >\r\n          <Button\r\n            type={isOwnedTab ? \"primary\" : \"default\"}\r\n            onClick={() => {\r\n              setIsOwnedTab(true);\r\n              //remove 3d items\r\n              gameManager.studioSceneManager.clearCharcterData();\r\n            }}\r\n          >\r\n            物入れ\r\n          </Button>\r\n          <Button\r\n            type={!isOwnedTab ? \"primary\" : \"default\"}\r\n            onClick={() => {\r\n              setIsLoading(true);\r\n              setIsOwnedTab(false);\r\n              //load 3d items\r\n              gameManager.studioSceneManager.clearCharcterData();\r\n\r\n              const onFinish = (result) => {\r\n                setIsLoading(false);\r\n                setSelectedItem(\r\n                  gameManager.studioSceneManager.charcterProps[\r\n                    Object.keys(Categories)[0]\r\n                  ]\r\n                    ? gameManager.studioSceneManager.charcterProps[\r\n                      Object.keys(Categories)[0]\r\n                    ].myId\r\n                    : null\r\n                );\r\n                setCharcterData(result.data);\r\n                setTotalPrice(result.totalPrice);\r\n              };\r\n              gameManager.studioSceneManager.loadAllCharcterData(\r\n                appData.item_equipped,\r\n                onFinish\r\n              );\r\n            }}\r\n          >\r\n            お店\r\n          </Button>\r\n        </div>\r\n\r\n        <Col\r\n          span={24}\r\n          style={{\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <Row\r\n            justify=\"start\"\r\n            style={{\r\n              bottom: \"70%\",\r\n              position: \"absolute\",\r\n              width: \"100%\",\r\n              pointerEvents: \"none\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                pointerEvents: \"all\",\r\n                right: \"8%\",\r\n              }}\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                icon={<IconFont type=\"icon-shoppingcart\" />}\r\n                shape=\"circle\"\r\n                size=\"large\"\r\n                disabled={isOwnedTab}\r\n                style={{\r\n                  width: \"60px\",\r\n                  height: \"60px\",\r\n                  margin: \"25px 10px\",\r\n                  pointerEvents: \"all\",\r\n                }}\r\n                onClick={showConfirm}\r\n              ></Button>\r\n              <a\r\n                style={{\r\n                  position: \"absolute\",\r\n                  right: \"40%\",\r\n                  bottom: \"0\",\r\n                  color: \"#000\",\r\n                }}\r\n              >\r\n                {isOwnedTab ? 0 : totalPrice}\r\n              </a>\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  width: \"15px\",\r\n                  height: \"15px\",\r\n                  right: \"0\",\r\n                  bottom: \"0\",\r\n                  background: `url(./Ui/items/${\"dollar.png\"})`,\r\n                  backgroundRepeat: \"no-repeat\",\r\n                  // border: \"1px solid #898e94\",\r\n                  boxSizing: \"border-box\",\r\n                  margin: \"2px 0px\",\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </Row>\r\n          <Row\r\n            justify=\"start\"\r\n            style={{\r\n              height: \"35%\",\r\n              maxHeight: \"250px\",\r\n              bottom: \"1%\",\r\n              position: \"absolute\",\r\n              width: \"100%\",\r\n              pointerEvents: \"all\",\r\n            }}\r\n          >\r\n            <>\r\n              <Spin spinning={isLoading}>\r\n                <ScrollMenu\r\n                  menuStyle={{ width: \"100%\", justifyContent: \"center\" }}\r\n                  alignCenter={true}\r\n                  translate={10}\r\n                  hideArrows={true}\r\n                  // alignOnResize={true}\r\n                  data={Object.keys(Categories).map((category, index) => {\r\n                    return (\r\n                      <CategoryButton\r\n                        key={category}\r\n                        category={category}\r\n                        selected={selectedCat}\r\n                      />\r\n                    );\r\n                  })}\r\n                  arrowLeft={\r\n                    <Button\r\n                      type=\"text\"\r\n                      icon={<LeftOutlined />}\r\n                      size={\"middle\"}\r\n                    />\r\n                  }\r\n                  arrowRight={\r\n                    <Button\r\n                      type=\"text\"\r\n                      icon={<RightOutlined />}\r\n                      size={\"middle\"}\r\n                    />\r\n                  }\r\n                  selected={selectedCat}\r\n                  onSelect={(key) => {\r\n                    setSelectedCat(key);\r\n                    setSelectedItem(\r\n                      gameManager.studioSceneManager.charcterProps[key]\r\n                        ? gameManager.studioSceneManager.charcterProps[key].myId\r\n                        : null\r\n                    );\r\n                  }}\r\n                />\r\n                {selectedCat === \"hair\" && renderColors()}\r\n                <ScrollMenu\r\n                  menuStyle={{ width: \"100%\", justifyContent: \"center\" }}\r\n                  translate={10}\r\n                  hideArrows={true}\r\n                  alignCenter={true}\r\n                  alignOnResize={true}\r\n                  data={itemsPerCategory}\r\n                  arrowLeft={\r\n                    <Button\r\n                      type=\"text\"\r\n                      icon={<LeftOutlined />}\r\n                      size={\"middle\"}\r\n                    />\r\n                  }\r\n                  arrowRight={\r\n                    <Button\r\n                      type=\"text\"\r\n                      icon={<RightOutlined />}\r\n                      size={\"middle\"}\r\n                    />\r\n                  }\r\n                  selected={selectedItem}\r\n                  onSelect={(key) => {\r\n                    let newValue = key === selectedItem ? undefined : key;\r\n                    loadItemPerId(newValue);\r\n                    setSelectedItem(newValue);\r\n                    if (selectedCat === \"hair\") setSelectedColor(null);\r\n                  }}\r\n                />\r\n              </Spin>\r\n            </>\r\n\r\n            {/* </Col> */}\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      {/* <ListModal\r\n        isMenuVisible={isOwnedTab}\r\n        selectedListTab={selectedListTab}\r\n        selectedModalData={selectedModalData}\r\n        setIsMenuVisible={setIsOwnedTab}\r\n      /> */}\r\n    </>\r\n  );\r\n};\r\nexport default EditorController;\r\n","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\GameManager.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\CategoryButton.jsx",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\ListModal.jsx",["78","79","80"],"import React, { useMemo } from \"react\";\r\nimport Modal from \"antd/es/modal\";\r\nimport Row from \"antd/es/row\";\r\nimport Col from \"antd/es/col\";\r\nimport { Typography, Input, Button, Select, Divider } from \"antd\";\r\nimport { AppTabsEnum } from \"../AppUtils\";\r\n\r\nconst { Text } = Typography;\r\n\r\nfunction ListModal(props) {\r\n  const {\r\n    isMenuVisible,\r\n    selectedListTab,\r\n    selectedModalData,\r\n    setIsMenuVisible,\r\n  } = props;\r\n\r\n  const IsOwnedTab = useMemo(() => {\r\n    return selectedListTab === AppTabsEnum.ownedTab ? true : false;\r\n  }, [selectedListTab]);\r\n\r\n  const handleModalConfirm = () => {};\r\n\r\n  return (\r\n    isMenuVisible && (\r\n      <Modal\r\n        okText={\"Close\"}\r\n        onCancel={() => {\r\n          setIsMenuVisible(false);\r\n        }}\r\n        footer={\r\n          <div\r\n            style={{\r\n              textAlign: \"right\",\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setIsMenuVisible(false);\r\n              }}\r\n              type=\"primary\"\r\n            >\r\n              {\"Close\"}\r\n            </Button>\r\n          </div>\r\n        }\r\n        closable={true}\r\n        destroyOnClose\r\n        visible={isMenuVisible}\r\n        title={IsOwnedTab ? \"Own Tab\" : \"Purchased Tab\"}\r\n        width={800}\r\n        style={{ marginTop: \"-1%\" }}\r\n      >\r\n        {/* ZipCode */}\r\n\r\n        {selectedModalData.map((catObj, index) => {\r\n          return (\r\n            <Row key={index} style={{ marginBottom: \"0px\" }}>\r\n              <Col offset={2} span={22} style={{ marginBottom: \"0px\" }}>\r\n                <Text\r\n                  strong={true}\r\n                  style={{ fontSize: \"15px\", fontWeight: \"300\" }}\r\n                >\r\n                  {catObj.category.toUpperCase()}\r\n                </Text>\r\n              </Col>\r\n              {IsOwnedTab ? (\r\n                catObj.items.length > 0 ? (\r\n                  catObj.items.map((item, itemIndex) => {\r\n                    return (\r\n                      <div\r\n                        key={itemIndex}\r\n                        style={{ width: \"100%\", display: \"flex\" }}\r\n                      >\r\n                        <Col offset={3} span={12}>\r\n                          <Text style={{ fontSize: \"15px\", fontWeight: \"300\" }}>\r\n                            {item}\r\n                          </Text>\r\n                        </Col>\r\n                      </div>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <div style={{ width: \"100%\", display: \"flex\" }}>\r\n                    <Col offset={3} span={12}>\r\n                      <Text style={{ fontSize: \"15px\", fontWeight: \"300\" }}>\r\n                        {\"No Items\"}\r\n                      </Text>\r\n                    </Col>\r\n                  </div>\r\n                )\r\n              ) : (\r\n                <div style={{ width: \"100%\", display: \"flex\" }}>\r\n                  <Col offset={4} span={12}>\r\n                    <Text style={{ fontSize: \"15px\", fontWeight: \"300\" }}>\r\n                      {catObj.item ? catObj.item : \"No Item Selected\"}\r\n                    </Text>\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <Text style={{ fontSize: \"15px\", fontWeight: \"300\" }}>\r\n                      {catObj.price ? `${catObj.price}$` : `${0}$`}\r\n                    </Text>\r\n                  </Col>\r\n                </div>\r\n              )}\r\n              <Divider />\r\n            </Row>\r\n          );\r\n        })}\r\n      </Modal>\r\n    )\r\n  );\r\n}\r\nexport default ListModal;\r\n","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Editor\\ItemButton.jsx",["81","82"],"import React, { useEffect } from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst ItemButton = (porps) => {\r\n  const { itemData, selected } = porps;\r\n  useEffect(() => {\r\n    console.log(itemData)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"84px\",\r\n          height: \"74px\",\r\n          background: `url(./Ui/items/${itemData.id}.PNG)`,\r\n          backgroundRepeat: \"round\",\r\n          border: selected ? \"2px solid rgb(0 116 255)\" : \"1px solid #898e94\",\r\n          boxSizing: \"border-box\",\r\n          margin: \"10px\",\r\n        }}\r\n      >\r\n        <a\r\n          style={{\r\n            position: \"absolute\",\r\n            right: \"25%\",\r\n            bottom: \"0\",\r\n            color: \"#000\",\r\n          }}\r\n        >\r\n          {itemData.price}\r\n        </a>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            width: \"15px\",\r\n            height: \"15px\",\r\n            right: \"0\",\r\n            bottom: \"0\",\r\n            background: `url(./Ui/items/${\"dollar.png\"})`,\r\n            backgroundRepeat: \"no-repeat\",\r\n            // border: \"1px solid #898e94\",\r\n            boxSizing: \"border-box\",\r\n            margin: \"2px 0px\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ItemButton;\r\n","D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\StudioScene\\StudioSceneManager.js",[],"D:\\collection\\PROJECT`s\\JAPAN\\8863074498439810063enhancementv7\\src\\Babylon\\StudioScene\\LoaderManager.js",[],{"ruleId":"83","severity":1,"message":"84","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"83","severity":1,"message":"91","line":7,"column":3,"nodeType":"85","messageId":"86","endLine":7,"endColumn":10},{"ruleId":"83","severity":1,"message":"92","line":24,"column":23,"nodeType":"85","messageId":"86","endLine":24,"endColumn":36},{"ruleId":"83","severity":1,"message":"93","line":2,"column":31,"nodeType":"85","messageId":"86","endLine":2,"endColumn":36},{"ruleId":"83","severity":1,"message":"94","line":20,"column":8,"nodeType":"85","messageId":"86","endLine":20,"endColumn":17},{"ruleId":"83","severity":1,"message":"95","line":42,"column":10,"nodeType":"85","messageId":"86","endLine":42,"endColumn":27},{"ruleId":"83","severity":1,"message":"96","line":43,"column":10,"nodeType":"85","messageId":"86","endLine":43,"endColumn":25},{"ruleId":"97","severity":1,"message":"98","line":82,"column":6,"nodeType":"99","endLine":82,"endColumn":19,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":129,"column":6,"nodeType":"99","endLine":129,"endColumn":45,"suggestions":"102"},{"ruleId":"83","severity":1,"message":"103","line":191,"column":9,"nodeType":"85","messageId":"86","endLine":191,"endColumn":26},{"ruleId":"97","severity":1,"message":"104","line":200,"column":5,"nodeType":"99","endLine":200,"endColumn":19,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":318,"column":15,"nodeType":"108","endLine":325,"endColumn":16},{"ruleId":"83","severity":1,"message":"109","line":5,"column":22,"nodeType":"85","messageId":"86","endLine":5,"endColumn":27},{"ruleId":"83","severity":1,"message":"110","line":5,"column":37,"nodeType":"85","messageId":"86","endLine":5,"endColumn":43},{"ruleId":"83","severity":1,"message":"111","line":22,"column":9,"nodeType":"85","messageId":"86","endLine":22,"endColumn":27},{"ruleId":"97","severity":1,"message":"112","line":8,"column":6,"nodeType":"99","endLine":8,"endColumn":8,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"107","line":23,"column":9,"nodeType":"108","endLine":30,"endColumn":10},"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"'useMemo' is defined but never used.","'setSeletedTab' is assigned a value but never used.","'Radio' is defined but never used.","'ListModal' is defined but never used.","'selectedModalData' is assigned a value but never used.","'selectedListTab' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appData.item_equipped', 'setHandler', and 'studioSceneHandlers'. Either include them or remove the dependency array.","ArrayExpression",["116"],"React Hook useMemo has a missing dependency: 'appData.item_owned'. Either include it or remove the dependency array.",["117"],"'handleOnModalOpen' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'appData.item_owned'. Either include it or remove the dependency array.",["118"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Input' is defined but never used.","'Select' is defined but never used.","'handleModalConfirm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'itemData'. Either include it or remove the dependency array.",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [appData.item_equipped, gameManager, setHandler, studioSceneHandlers]",{"range":"128","text":"129"},"Update the dependencies array to be: [selectedCat, appData.item_owned, isOwnedTab, selectedItem]",{"range":"130","text":"131"},"Update the dependencies array to be: [appData.item_owned, charcterData]",{"range":"132","text":"133"},"Update the dependencies array to be: [itemData]",{"range":"134","text":"135"},[2571,2584],"[appData.item_equipped, gameManager, setHandler, studioSceneHandlers]",[3937,3976],"[selectedCat, appData.item_owned, isOwnedTab, selectedItem]",[5987,6001],"[appData.item_owned, charcterData]",[196,198],"[itemData]"]