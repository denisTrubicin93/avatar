{"ast":null,"code":"import * as BABYLON from \"babylonjs\";\nimport \"babylonjs-loaders\";\nimport { Categories } from \"../../Config.json\";\nexport default class LoaderManager {\n  constructor(sceneManager) {\n    this.game = sceneManager.game;\n    this.scene = sceneManager.scene;\n    this.sceneManager = sceneManager;\n  }\n\n  loadItemById(type, name, onLoad = null) {\n    //Load Sock Model\n    console.log(\"type\", type, \"-__-\", name);\n    let loadingOpts = {\n      path: `./models/${type}/`,\n      name: `${name}.gltf`\n    };\n    let assetsManager = new BABYLON.AssetsManager(this.scene);\n    let itemTask = assetsManager.addMeshTask(\"itemTask\", \"\", loadingOpts.path, loadingOpts.name);\n\n    itemTask.onSuccess = task => {\n      let itemMesh = task.loadedMeshes.find(mesh => mesh.name === \"__root__\");\n      this.sceneManager.charcterProps[type] = itemMesh;\n      this.sceneManager.charcterProps[type].myId = name;\n\n      if (name !== \"base\") {\n        this.sceneManager.charcterProps[type].price = Categories[type][name].price;\n        this.sceneManager.charcterProps[type].itemName = Categories[type][name].name;\n      }\n\n      for (let j = 0; j < task.loadedMeshes.length; j++) {\n        let mesh = task.loadedMeshes[j];\n\n        if (mesh.getTotalVertices() > 0) {\n          //if it's mesh\n          this.sceneManager.mirror.renderList.push(mesh); // this.sceneManager.shadowGenerator\n          //   .getShadowMap()\n          //   .renderList.push(mesh);\n          // this.sceneManager.shadowGenerator.addShadowCaster(mesh, true);\n        }\n      }\n\n      if (type === \"pet\") {\n        const {\n          opt\n        } = Categories[type][name];\n        itemMesh.position = new BABYLON.Vector3(opt.x, opt.y, 0);\n        itemMesh.scaling = new BABYLON.Vector3(opt.scale, opt.scale, opt.scale);\n      } else {\n        itemMesh.scaling = new BABYLON.Vector3(5, 5, 5);\n      }\n\n      if (name === \"baloon\") itemMesh.position.x = -7;\n      onLoad({\n        data: this.sceneManager.getCharcterSummary(),\n        totalPrice: this.sceneManager.getTotatlPrice()\n      });\n    };\n\n    assetsManager.onProgress = (remainingCount, totalCount, lastFinishedTask) => {\n      this.game.engine.loadingUIText = \"loading Assets \" + remainingCount + \" out of \" + totalCount + \" items still need to be loaded.\";\n    };\n\n    assetsManager.onFinish = tasks => {// console.log(\"disable Loading bar\");\n    }; // Start loading\n\n\n    assetsManager.useDefaultLoadingScreen = false;\n    assetsManager.load();\n  }\n\n}","map":{"version":3,"sources":["D:/collection/PROJECT`s/JAPAN/8863074498439810063enhancementv7/src/Babylon/StudioScene/LoaderManager.js"],"names":["BABYLON","Categories","LoaderManager","constructor","sceneManager","game","scene","loadItemById","type","name","onLoad","console","log","loadingOpts","path","assetsManager","AssetsManager","itemTask","addMeshTask","onSuccess","task","itemMesh","loadedMeshes","find","mesh","charcterProps","myId","price","itemName","j","length","getTotalVertices","mirror","renderList","push","opt","position","Vector3","x","y","scaling","scale","data","getCharcterSummary","totalPrice","getTotatlPrice","onProgress","remainingCount","totalCount","lastFinishedTask","engine","loadingUIText","onFinish","tasks","useDefaultLoadingScreen","load"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,OAAO,mBAAP;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,eAAe,MAAMC,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB,SAAKC,IAAL,GAAYD,YAAY,CAACC,IAAzB;AACA,SAAKC,KAAL,GAAaF,YAAY,CAACE,KAA1B;AACA,SAAKF,YAAL,GAAoBA,YAApB;AACD;;AACDG,EAAAA,YAAY,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAM,GAAG,IAAtB,EAA4B;AACtC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB,EAA0B,MAA1B,EAAkCC,IAAlC;AACA,QAAII,WAAW,GAAG;AAChBC,MAAAA,IAAI,EAAG,YAAWN,IAAK,GADP;AAEhBC,MAAAA,IAAI,EAAG,GAAEA,IAAK;AAFE,KAAlB;AAKA,QAAIM,aAAa,GAAG,IAAIf,OAAO,CAACgB,aAAZ,CAA0B,KAAKV,KAA/B,CAApB;AACA,QAAIW,QAAQ,GAAGF,aAAa,CAACG,WAAd,CACb,UADa,EAEb,EAFa,EAGbL,WAAW,CAACC,IAHC,EAIbD,WAAW,CAACJ,IAJC,CAAf;;AAMAQ,IAAAA,QAAQ,CAACE,SAAT,GAAsBC,IAAD,IAAU;AAC7B,UAAIC,QAAQ,GAAGD,IAAI,CAACE,YAAL,CAAkBC,IAAlB,CAAwBC,IAAD,IAAUA,IAAI,CAACf,IAAL,KAAc,UAA/C,CAAf;AACA,WAAKL,YAAL,CAAkBqB,aAAlB,CAAgCjB,IAAhC,IAAwCa,QAAxC;AACA,WAAKjB,YAAL,CAAkBqB,aAAlB,CAAgCjB,IAAhC,EAAsCkB,IAAtC,GAA6CjB,IAA7C;;AACA,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAKL,YAAL,CAAkBqB,aAAlB,CAAgCjB,IAAhC,EAAsCmB,KAAtC,GACE1B,UAAU,CAACO,IAAD,CAAV,CAAiBC,IAAjB,EAAuBkB,KADzB;AAGA,aAAKvB,YAAL,CAAkBqB,aAAlB,CAAgCjB,IAAhC,EAAsCoB,QAAtC,GACE3B,UAAU,CAACO,IAAD,CAAV,CAAiBC,IAAjB,EAAuBA,IADzB;AAED;;AAED,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACE,YAAL,CAAkBQ,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,YAAIL,IAAI,GAAGJ,IAAI,CAACE,YAAL,CAAkBO,CAAlB,CAAX;;AACA,YAAIL,IAAI,CAACO,gBAAL,KAA0B,CAA9B,EAAiC;AAC/B;AACA,eAAK3B,YAAL,CAAkB4B,MAAlB,CAAyBC,UAAzB,CAAoCC,IAApC,CAAyCV,IAAzC,EAF+B,CAG/B;AACA;AACA;AACA;AACD;AACF;;AACD,UAAIhB,IAAI,KAAK,KAAb,EAAoB;AAClB,cAAM;AAAE2B,UAAAA;AAAF,YAAUlC,UAAU,CAACO,IAAD,CAAV,CAAiBC,IAAjB,CAAhB;AAEAY,QAAAA,QAAQ,CAACe,QAAT,GAAoB,IAAIpC,OAAO,CAACqC,OAAZ,CAAoBF,GAAG,CAACG,CAAxB,EAA2BH,GAAG,CAACI,CAA/B,EAAkC,CAAlC,CAApB;AACAlB,QAAAA,QAAQ,CAACmB,OAAT,GAAmB,IAAIxC,OAAO,CAACqC,OAAZ,CAAoBF,GAAG,CAACM,KAAxB,EAA+BN,GAAG,CAACM,KAAnC,EAA0CN,GAAG,CAACM,KAA9C,CAAnB;AACD,OALD,MAKO;AACLpB,QAAAA,QAAQ,CAACmB,OAAT,GAAmB,IAAIxC,OAAO,CAACqC,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAnB;AACD;;AACD,UAAI5B,IAAI,KAAK,QAAb,EAAuBY,QAAQ,CAACe,QAAT,CAAkBE,CAAlB,GAAsB,CAAC,CAAvB;AAEvB5B,MAAAA,MAAM,CAAC;AACLgC,QAAAA,IAAI,EAAE,KAAKtC,YAAL,CAAkBuC,kBAAlB,EADD;AAELC,QAAAA,UAAU,EAAE,KAAKxC,YAAL,CAAkByC,cAAlB;AAFP,OAAD,CAAN;AAID,KArCD;;AAuCA9B,IAAAA,aAAa,CAAC+B,UAAd,GAA2B,CACzBC,cADyB,EAEzBC,UAFyB,EAGzBC,gBAHyB,KAItB;AACH,WAAK5C,IAAL,CAAU6C,MAAV,CAAiBC,aAAjB,GACE,oBACAJ,cADA,GAEA,UAFA,GAGAC,UAHA,GAIA,iCALF;AAMD,KAXD;;AAaAjC,IAAAA,aAAa,CAACqC,QAAd,GAA0BC,KAAD,IAAW,CAClC;AACD,KAFD,CAnEsC,CAsEtC;;;AACAtC,IAAAA,aAAa,CAACuC,uBAAd,GAAwC,KAAxC;AACAvC,IAAAA,aAAa,CAACwC,IAAd;AACD;;AA/EgC","sourcesContent":["import * as BABYLON from \"babylonjs\";\r\nimport \"babylonjs-loaders\";\r\nimport { Categories } from \"../../Config.json\";\r\n\r\nexport default class LoaderManager {\r\n  constructor(sceneManager) {\r\n    this.game = sceneManager.game;\r\n    this.scene = sceneManager.scene;\r\n    this.sceneManager = sceneManager;\r\n  }\r\n  loadItemById(type, name, onLoad = null) {\r\n    //Load Sock Model\r\n    console.log(\"type\", type, \"-__-\", name);\r\n    let loadingOpts = {\r\n      path: `./models/${type}/`,\r\n      name: `${name}.gltf`,\r\n    };\r\n\r\n    let assetsManager = new BABYLON.AssetsManager(this.scene);\r\n    let itemTask = assetsManager.addMeshTask(\r\n      \"itemTask\",\r\n      \"\",\r\n      loadingOpts.path,\r\n      loadingOpts.name\r\n    );\r\n    itemTask.onSuccess = (task) => {\r\n      let itemMesh = task.loadedMeshes.find((mesh) => mesh.name === \"__root__\");\r\n      this.sceneManager.charcterProps[type] = itemMesh;\r\n      this.sceneManager.charcterProps[type].myId = name;\r\n      if (name !== \"base\") {\r\n        this.sceneManager.charcterProps[type].price =\r\n          Categories[type][name].price;\r\n\r\n        this.sceneManager.charcterProps[type].itemName =\r\n          Categories[type][name].name;\r\n      }\r\n\r\n      for (let j = 0; j < task.loadedMeshes.length; j++) {\r\n        let mesh = task.loadedMeshes[j];\r\n        if (mesh.getTotalVertices() > 0) {\r\n          //if it's mesh\r\n          this.sceneManager.mirror.renderList.push(mesh);\r\n          // this.sceneManager.shadowGenerator\r\n          //   .getShadowMap()\r\n          //   .renderList.push(mesh);\r\n          // this.sceneManager.shadowGenerator.addShadowCaster(mesh, true);\r\n        }\r\n      }\r\n      if (type === \"pet\") {\r\n        const { opt } = Categories[type][name];\r\n\r\n        itemMesh.position = new BABYLON.Vector3(opt.x, opt.y, 0);\r\n        itemMesh.scaling = new BABYLON.Vector3(opt.scale, opt.scale, opt.scale);\r\n      } else {\r\n        itemMesh.scaling = new BABYLON.Vector3(5, 5, 5);\r\n      }\r\n      if (name === \"baloon\") itemMesh.position.x = -7;\r\n\r\n      onLoad({\r\n        data: this.sceneManager.getCharcterSummary(),\r\n        totalPrice: this.sceneManager.getTotatlPrice(),\r\n      });\r\n    };\r\n\r\n    assetsManager.onProgress = (\r\n      remainingCount,\r\n      totalCount,\r\n      lastFinishedTask\r\n    ) => {\r\n      this.game.engine.loadingUIText =\r\n        \"loading Assets \" +\r\n        remainingCount +\r\n        \" out of \" +\r\n        totalCount +\r\n        \" items still need to be loaded.\";\r\n    };\r\n\r\n    assetsManager.onFinish = (tasks) => {\r\n      // console.log(\"disable Loading bar\");\r\n    };\r\n    // Start loading\r\n    assetsManager.useDefaultLoadingScreen = false;\r\n    assetsManager.load();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}